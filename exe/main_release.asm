; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.24213.1 

	TITLE	C:\Users\tab\Documents\Stuff\Shoshin\src\main_release.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?wavHeader@@3QBHB DD 046464952H				; wavHeader
	DD	08bf764H
	DD	045564157H
	DD	020746d66H
	DD	010H
	DD	020001H
	DD	0ac44H
	DD	02b110H
	DD	0100004H
	DD	061746164H
	DD	08bf740H
?pfd@@3UtagPIXELFORMATDESCRIPTOR@@B DW 00H		; pfd
	DW	00H
	DD	021H
	ORG $+32
CONST	ENDS
PUBLIC	?entrypoint@@YIXXZ				; entrypoint
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__ChoosePixelFormat@8:PROC
EXTRN	__imp__SetPixelFormat@12:PROC
EXTRN	__imp__wglCreateContext@4:PROC
EXTRN	__imp__wglMakeCurrent@8:PROC
EXTRN	__imp__wglSwapLayerBuffers@8:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__GetAsyncKeyState@4:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__ShowCursor@4:PROC
EXTRN	__imp__ChangeDisplaySettingsA@8:PROC
EXTRN	__imp__sndPlaySoundA@8:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	?intro_init@@YIXXZ:PROC				; intro_init
EXTRN	?intro_do@@YIXJ@Z:PROC				; intro_do
EXTRN	?mzk_init@@YIXPAF@Z:PROC			; mzk_init
_BSS	SEGMENT
?myMuzik@@3PAFA DW 08bf756H DUP (?)			; myMuzik
_BSS	ENDS
; Function compile flags: /Ogspy
; File c:\users\tab\documents\stuff\shoshin\src\main_release.cpp
;	COMDAT ?entrypoint@@YIXXZ
main	SEGMENT
?entrypoint@@YIXXZ PROC					; entrypoint, COMDAT

; 38   : {

	push	ebx
	push	esi
	push	edi

; 39   :     // full screen
; 40   :     //if( ChangeDisplaySettings(&screenSettings, NULL/*,CDS_FULLSCREEN*/)!=DISP_CHANGE_SUCCESSFUL) return;
; 41   :     ShowCursor( 0 );

	xor	ebx, ebx
	push	ebx
	call	DWORD PTR __imp__ShowCursor@4

; 42   : 
; 43   :     HWND hWnd = CreateWindow( (LPCSTR)0xC018,0,WS_VISIBLE,0,20,XRES,YRES,0,0,0,0);

	push	ebx
	push	ebx
	push	ebx
	push	ebx
	push	720					; 000002d0H
	push	1280					; 00000500H
	push	20					; 00000014H
	push	ebx
	push	268435456				; 10000000H
	push	ebx
	push	49176					; 0000c018H
	push	ebx
	call	DWORD PTR __imp__CreateWindowExA@48

; 44   :     HDC hDC = GetDC(hWnd);

	push	eax
	call	DWORD PTR __imp__GetDC@4
	mov	ebx, eax

; 45   : 
; 46   : 	SetPixelFormat(hDC, ChoosePixelFormat(hDC, &pfd), &pfd);

	mov	eax, OFFSET ?pfd@@3UtagPIXELFORMATDESCRIPTOR@@B
	push	eax
	push	eax
	push	ebx
	call	DWORD PTR __imp__ChoosePixelFormat@8
	push	eax
	push	ebx
	call	DWORD PTR __imp__SetPixelFormat@12

; 47   :     wglMakeCurrent(hDC, wglCreateContext(hDC));

	push	ebx
	call	DWORD PTR __imp__wglCreateContext@4
	push	eax
	push	ebx
	call	DWORD PTR __imp__wglMakeCurrent@8

; 48   : 
; 49   : 	intro_init();

	call	?intro_init@@YIXXZ			; intro_init

; 50   : 
; 51   :     mzk_init( myMuzik+22 );

	mov	ecx, OFFSET ?myMuzik@@3PAFA+44
	call	?mzk_init@@YIXPAF@Z			; mzk_init

; 52   :     memcpy( myMuzik, wavHeader, 44 );

	push	11					; 0000000bH
	pop	ecx
	mov	esi, OFFSET ?wavHeader@@3QBHB
	mov	edi, OFFSET ?myMuzik@@3PAFA
	rep movsd

; 53   :     //sndPlaySound( (const char*)&myMuzik, SND_ASYNC|SND_MEMORY );
; 54   : 
; 55   : 	long t, to = timeGetTime();

	mov	esi, DWORD PTR __imp__timeGetTime@0
	call	esi
	mov	edi, eax
$LL4@entrypoint:

; 56   : 
; 57   :     do 
; 58   :     {
; 59   :         t = timeGetTime() - to;

	call	esi
	sub	eax, edi

; 60   :         intro_do( t );

	mov	ecx, eax
	call	?intro_do@@YIXJ@Z			; intro_do

; 61   :         wglSwapLayerBuffers( hDC, WGL_SWAP_MAIN_PLANE );

	push	1
	push	ebx
	call	DWORD PTR __imp__wglSwapLayerBuffers@8

; 62   :     }while ( !GetAsyncKeyState(VK_ESCAPE) );

	push	27					; 0000001bH
	call	DWORD PTR __imp__GetAsyncKeyState@4
	test	ax, ax
	je	SHORT $LL4@entrypoint

; 63   : 	
; 64   :     sndPlaySound( 0, 0 );

	xor	esi, esi
	push	esi
	push	esi
	call	DWORD PTR __imp__sndPlaySoundA@8

; 65   :     ChangeDisplaySettings( 0, 0 );

	push	esi
	push	esi
	call	DWORD PTR __imp__ChangeDisplaySettingsA@8

; 66   :     ShowCursor(1);

	push	1
	call	DWORD PTR __imp__ShowCursor@4

; 67   : 
; 68   :     ExitProcess(0);

	push	esi
	call	DWORD PTR __imp__ExitProcess@4
	pop	edi
	pop	esi
	pop	ebx
$LN10@entrypoint:
$LN9@entrypoint:
?entrypoint@@YIXXZ ENDP					; entrypoint
main	ENDS
END
